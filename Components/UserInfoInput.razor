@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject IMessageService _message
@inject IJSRuntime JSRunTime

@* <p Style="display:inline-block">@i18n["username"] : </p>
<Input Placeholder=@i18n["username"] @bind-Value="@userInfo.userName" DebounceMilliseconds="0" Style="display:inline-block" /> *@
<InputChunk @bind-Value="@userInfo.userName" placeHolder="@i18n["username"]" tip="@i18n["username"]" />
<br/>
@* <p Style="display:inline-block">@i18n["password"] : </p>
<InputPassword Placeholder=@i18n["password"] @bind-Value="@userInfo.password" DebounceMilliseconds="0" Style="display:inline-block" /> *@
<InputChunk placeHolder="@i18n["password"]" @bind-Value="@userInfo.password" tip="@i18n["password"]" isPassword="true"/>
<Button Type="@ButtonType.Primary" Style="display: flex;align-items: center;justify-content: center;margin-top: 10px;" @onclick="Save">
    @i18n["confirm"]
</Button>

@code {
    [Parameter]
    public string inputType { get; set; }

    public UserInfo userInfo { get; set; } = new();
    I18nText.auth i18n = new I18nText.auth();
    protected override async Task OnInitializedAsync()
    {
        i18n = await I18nText.GetTextTableAsync<I18nText.auth>(this);
    }
    private async Task Save()
    {
        if (inputType == "register")
        {
            if (string.IsNullOrWhiteSpace(userInfo.userName) || string.IsNullOrWhiteSpace(userInfo.password)||await Shared.Database.AuthUser(userInfo.userName))
            {
                RenderFragment customIcon = @<Icon Type="close-circle" Theme="outline" Style="color:red"></Icon>;
                await _message.Error(i18n["invalid"]);
            }
            else
            {
                //本来应该是加盐，但是加个盐木也是一样的对吧:)
                await Shared.Database.CreateUser(userInfo.userName, userInfo.password+"saltwood");
                var authModule = await JSRunTime.InvokeAsync<IJSObjectReference>("import", "./js/auth.js");
                await authModule.InvokeVoidAsync("SignIn", userInfo.userName, userInfo.password, "/");

            }
        }
        else
        {
            if (await Shared.Database.AuthUser(userInfo.userName, userInfo.password+"saltwood"))
            {
                var authModule = await JSRunTime.InvokeAsync<IJSObjectReference>("import", "./js/auth.js");
                await authModule.InvokeVoidAsync("SignIn", userInfo.userName, userInfo.password, "/");
            }
            else
            {
                RenderFragment customIcon = @<Icon Type="close-circle" Theme="outline" Style="color:red"></Icon>;
                await _message.Error(i18n["login_failed"]);
            }
        }
    }

}
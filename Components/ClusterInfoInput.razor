@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject INotificationService _notice
@inject UserService _userService

@* <p Style="display:inline-block">@i18n["username"] : </p>
<Input Placeholder=@i18n["username"] @bind-Value="@userInfo.userName" DebounceMilliseconds="0" Style="display:inline-block" /> *@
<InputChunk @bind-Value="@clusterInfo.cluster_id" placeHolder="Cluster ID" tip="Cluster ID" />
<br />
@* <p Style="display:inline-block">@i18n["password"] : </p>
<InputPassword Placeholder=@i18n["password"] @bind-Value="@userInfo.password" DebounceMilliseconds="0" Style="display:inline-block" /> *@
<InputChunk placeHolder="Cluster secret" @bind-Value="@clusterInfo.cluster_secret" tip="Cluster secret" isPassword="true" />
<Button Type="@ButtonType.Primary" Style="display: flex;align-items: center;justify-content: center;margin-top: 10px;" @onclick="Save">
    @i18n["confirm"]
</Button>

@code {

    public ClusterInfo clusterInfo { get; set; } = new();
    I18nText.cluster i18n = new I18nText.cluster();
    protected override async Task OnInitializedAsync()
    {
        i18n = await I18nText.GetTextTableAsync<I18nText.cluster>(this);
    }
    private async Task Save()
    {
        if (await Shared.Database.CheckCluster(_userService.GetCurrentUsername(), clusterInfo.cluster_id)||string.IsNullOrWhiteSpace(clusterInfo.cluster_id)||string.IsNullOrWhiteSpace(clusterInfo.cluster_secret))
        {
            RenderFragment customIcon = @<Icon Type="close-circle" Theme="outline" Style="color:red"></Icon>;
            await _notice.Open(new NotificationConfig()
                {
                    Message = i18n["invalid_title"],
                    Description = i18n["invalid_intro"],
                    Icon = customIcon
                });
            return;
        }
        await Shared.Database.AddCluster(_userService.GetCurrentUsername(), clusterInfo.cluster_id, clusterInfo.cluster_secret);
    }

}
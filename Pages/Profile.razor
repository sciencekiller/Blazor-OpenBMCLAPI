@page "/profile"
@attribute [Authorize]
@inject IStringLocalizer<Resources.Profile> i18n
@inject IMessageService _message
@inject UserService _userService

<h1 style="font-size:32px">@i18n["title"]</h1>
<Button type="@ButtonType.Primary" Style="margin-left:auto" @onclick="AddProfile">@i18n["add"]</Button>
<Modal Title="@i18n["add_profile"]"
       Visible="@_modal_visible"
       OnCancel="@HandleCancel"
       OnOk="@HandleOk">
    <InputChunk @bind-Value="@addInfo.name" placeHolder="@i18n["name"]" tip="@i18n["name"]" />
    <br />
    <p>@i18n["type"] :</p>
    <Select DataSource="@supportTypes"
            @bind-Value="@addInfo.type"
            ItemValue="c=>c.TypeCode"
            ItemLabel="c=>c.TypeDisplay"
            DefaultValue="@("csharp_remote")" />
    <br />
    <InputChunk placeHolder="@i18n["endpoint_detail"]" @bind-Value="@addInfo.endpoint" tip="@i18n["endpoint"]" />
</Modal>
<Table TItem="IProfile" DataSource="@profileInfo">
    <PropertyColumn Property="c=>c.name" Title="@i18n["name"]"></PropertyColumn>
    <PropertyColumn Property="c=>i18n[c.type].ToString()" Title="@i18n["type"]"></PropertyColumn>
    <PropertyColumn Property="c=>c.endpoint" Title="@i18n["endpoint"]"></PropertyColumn>
    <ActionColumn Title="@i18n["action"]">
        <Space Size=@("middle")>
            <SpaceItem>
                <Popconfirm Title="@i18n["delete_confirm"]" OkText="@i18n["confirm"]" CancelText="@i18n["cancel"]" OnConfirm="()=>Delete(context.name)">
                    <Button Type="@ButtonType.Link" Danger>@i18n["delete"]</Button>
                </Popconfirm>
                <Popover Title="@i18n["edit_profile"]" Trigger="@(new AntDesign.Trigger[] { AntDesign.Trigger.Click})" Visible=@_popover_visible OnVisibleChange="VisibleChanged">
                    <ChildContent>
                        <Button Type="@ButtonType.Link">@i18n["edit"]</Button>
                    </ChildContent>
                    <ContentTemplate>
                        <InputChunk @bind-Value="@editInfo.name" placeHolder="@i18n["name"]" tip="@i18n["name"]" />
                        <br />
                        <p>@i18n["type"] :</p>
                        <Select DataSource="@supportTypes"
                                @bind-Value="@editInfo.type"
                                ItemValue="c=>c.TypeCode"
                                ItemLabel="c=>c.TypeDisplay"
                                DefaultValue="@("csharp_remote")" />
                        <br />
                        <InputChunk placeHolder="@i18n["endpoint_detail"]" @bind-Value="@editInfo.endpoint" tip="@i18n["endpoint"]" />
                        <Button Type="@ButtonType.Primary" @onclick="()=>Edit(context.name,editInfo.name,editInfo.type,editInfo.endpoint)" Loading="@popoverButtonLoading">@i18n["confirm"]</Button>
                    </ContentTemplate>
                </Popover>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>
@code {
    private List<ProfileType> supportTypes;
    public List<ProfileInfo> profileInfo = new();
    public ProfileInfo editInfo = new ProfileInfo();
    public ProfileInfo addInfo = new ProfileInfo();
    private bool _popover_visible = false;
    private bool popoverButtonLoading = false;
    private bool _modal_visible = false;

    private void HandleCancel(MouseEventArgs e)
    {
        _modal_visible = false;
    }
    private async Task HandleOk()
    {
        if (await db.CheckProfile(_userService.GetCurrentUsername(), addInfo.name) || string.IsNullOrWhiteSpace(addInfo.name) || string.IsNullOrWhiteSpace(addInfo.type) || string.IsNullOrWhiteSpace(addInfo.endpoint))
        {
            RenderFragment customIcon = @<Icon Type="close-circle" Theme="outline" Style="color:red"></Icon>;
            await _message.Error(i18n["invalid"].ToString());
            return;
        }
        await db.AddProfile(_userService.GetCurrentUsername(), addInfo.name, addInfo.type, addInfo.endpoint);
        _modal_visible = false;
        profileInfo = await db.GetProfiles(_userService.GetCurrentUsername());
    }
    internal async Task Save()
    {
        RenderFragment customIcon = @<Icon Type="check-circle" Theme="outline" Style="color:limegreen"></Icon>;
        await _message.Success(i18n["saved"].ToString());
    }
    public void AddProfile()
    {
        _modal_visible = true;
    }
    protected override async Task OnInitializedAsync()
    {
        profileInfo = await db.GetProfiles(_userService.GetCurrentUsername());
        supportTypes = new()
    {
        new ProfileType("csharp_remote",i18n["csharp_remote"])
    };
    }
    private async Task Delete(string profileName)
    {
        await db.DeleteProfile(_userService.GetCurrentUsername(), profileName);
    }
    private async Task Edit(string origin_name, string target_name, string target_type, string target_endpoint)
    {
        popoverButtonLoading = true;
        await db.DeleteProfile(_userService.GetCurrentUsername(), origin_name);
        await db.AddProfile(_userService.GetCurrentUsername(), target_name, target_type, target_endpoint);
        profileInfo = await db.GetProfiles(_userService.GetCurrentUsername());
        _popover_visible = false;
        popoverButtonLoading = false;
    }
    private async Task VisibleChanged(bool visible)
    {
        _popover_visible = visible;
    }
}

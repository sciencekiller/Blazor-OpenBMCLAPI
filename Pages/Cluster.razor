@page "/cluster"
@attribute [Authorize]
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject INotificationService _notice
@inject UserService _userService
@using Blazor_OpenBMCLAPI.BackEnd;
<h1 style="font-size:32px">@i18n["title"]</h1>
<p></p>
<p style="font-size:14px">@i18n["cluster_intro"]</p>
<Button type="@ButtonType.Primary" Style="margin-left:auto" @onclick="AddCluster">@i18n["add"]</Button>
<Modal Title="@("Title")"
       Visible="@_visible"
       OnOk="@HandleOk"
       OnCancel="@HandleCancel"
       ConfirmLoading="@_confirmLoading">
    <p>@_modalText</p>
</Modal>
<Table TItem="ICluster" DataSource="@clusterinfo">
    <PropertyColumn Property="c=>c.cluster_id" Title="Cluster ID"></PropertyColumn>
    <PropertyColumn Property="c=>c.cluster_secret" Title="Cluster Secret"></PropertyColumn>
    <ActionColumn Title="Action">
        <Space Size=@("middle")>
            <SpaceItem>
                <a>Delete</a>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>
@code {
    public List<ClusterInfo> clusterinfo = new();
    I18nText.cluster i18n = new I18nText.cluster();
    protected override async Task OnInitializedAsync()
    {
        i18n = await I18nText.GetTextTableAsync<I18nText.cluster>(this);
        clusterinfo = await Shared.Database.GetClusters(_userService.GetCurrentUsername());
    }
    bool _visible = false;
    bool _confirmLoading = false;
    string _modalText = "Content of the modal";

    private void ShowModal()
    {
        _visible = true;
    }


    private async Task HandleOk(MouseEventArgs e)
    {
        _modalText = "The modal will be closed after two seconds";
        _confirmLoading = true;
        StateHasChanged();
        await Task.Delay(2000);
        _visible = false;
        _confirmLoading = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine("Clicked cancel button");
        _visible = false;
    }
    internal async Task Save()
    {
        RenderFragment customIcon = @<Icon Type="check-circle" Theme="outline" Style="color:limegreen"></Icon>;
        await _notice.Open(new NotificationConfig()
            {
                Message = i18n["saved"],
                Description = i18n["saved_intro"],
                Icon = customIcon
            });
    }
    public async Task AddCluster()
    {

    }
}

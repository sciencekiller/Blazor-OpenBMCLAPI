@page "/cluster"
@attribute [Authorize]
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject IMessageService _message
@inject UserService _userService
<h1 style="font-size:32px">@i18n["title"]</h1>
<p></p>
<p style="font-size:14px">@i18n["cluster_intro"]</p>
<Button type="@ButtonType.Primary" Style="margin-left:auto" @onclick="AddCluster">@i18n["add"]</Button>
<Modal Title="@i18n["add_cluster"]"
       Visible="@_modal_visible"
       OnCancel="@HandleCancel"
       OnOk="@HandleOk">
    <Blazor_OpenBMCLAPI.Components.ClusterInfoInput @bind-Value="@addInfo" />
</Modal>
<Table TItem="ICluster" DataSource="@clusterinfo">
    <PropertyColumn Property="c=>c.cluster_id" Title="Cluster ID"></PropertyColumn>
    <PropertyColumn Property="c=>c.cluster_secret" Title="Cluster Secret"></PropertyColumn>
    <ActionColumn Title="@i18n["action"]">
        <Space Size=@("middle")>
            <SpaceItem>
                <Popconfirm Title="@i18n["delete_confirm"]" OkText="@i18n["confirm"]" CancelText="@i18n["cancel"]" OnConfirm="()=>Delete(context.cluster_id)">
                    <Button Type="@ButtonType.Link" Danger>@i18n["delete"]</Button>
                </Popconfirm>
                <Popover Title="@i18n["edit_cluster"]" Trigger="@(new AntDesign.Trigger[] { AntDesign.Trigger.Click})" Visible=@_popover_visible OnVisibleChange="VisibleChanged">
                    <ChildContent>
                        <Button Type="@ButtonType.Link">@i18n["edit"]</Button>
                    </ChildContent>
                    <ContentTemplate>
                        <Blazor_OpenBMCLAPI.Components.ClusterInfoInput @bind-Value="@editInfo" />
                        <Button Type="@ButtonType.Primary" @onclick="()=>Edit(context.cluster_id,editInfo.cluster_id,editInfo.cluster_secret)" Loading="@popoverButtonLoading">@i18n["confirm"]</Button>
                    </ContentTemplate>
                </Popover>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>
@code {
    public ClusterInfo editInfo = new ClusterInfo();
    public List<ClusterInfo> clusterinfo = new();
    public ClusterInfo addInfo = new();
    I18nText.cluster i18n = new I18nText.cluster();
    protected override async Task OnInitializedAsync()
    {
        i18n = await I18nText.GetTextTableAsync<I18nText.cluster>(this);
        clusterinfo = await db.GetClusters(_userService.GetCurrentUsername());
    }
    private bool _modal_visible = false;
    private bool _popover_visible = false;
    private bool popoverButtonLoading = false;

    private void HandleCancel(MouseEventArgs e)
    {
        _modal_visible = false;
    }
    private async Task HandleOk()
    {
        if (await db.CheckCluster(_userService.GetCurrentUsername(), addInfo.cluster_id) || string.IsNullOrWhiteSpace(addInfo.cluster_id) || string.IsNullOrWhiteSpace(addInfo.cluster_secret))
        {
            RenderFragment customIcon = @<Icon Type="close-circle" Theme="outline" Style="color:red"></Icon>;
            await _message.Error(i18n["invalid"]);
            return;
        }
        await db.AddCluster(_userService.GetCurrentUsername(), addInfo.cluster_id, addInfo.cluster_secret);
        _modal_visible = false;
        clusterinfo = await db.GetClusters(_userService.GetCurrentUsername());
    }
    internal async Task Save()
    {
        RenderFragment customIcon = @<Icon Type="check-circle" Theme="outline" Style="color:limegreen"></Icon>;
        await _message.Success(i18n["saved"]);
    }
    public void AddCluster()
    {
        _modal_visible = true;
    }
    private async Task Delete(string id)
    {
        Trace.WriteLine(_userService.GetCurrentUsername() + "\t" + id);
        if (!await db.DeleteCluster(_userService.GetCurrentUsername(), id))
        {
            clusterinfo = await db.GetClusters(_userService.GetCurrentUsername());
            await _message.Error(i18n["delete_failed"]);
        }
        else
        {
            clusterinfo = await db.GetClusters(_userService.GetCurrentUsername());
            await _message.Success(i18n["delete_success"]);
        }
    }
    private async Task Edit(string origin_id, string target_id, string target_secret)
    {
        popoverButtonLoading = true;
        await db.DeleteCluster(_userService.GetCurrentUsername(), origin_id);
        await db.AddCluster(_userService.GetCurrentUsername(), target_id, target_secret);
        clusterinfo = await db.GetClusters(_userService.GetCurrentUsername());
        _popover_visible = false;
        popoverButtonLoading = false;
    }
    private async Task VisibleChanged(bool visible)
    {
        _popover_visible = visible;
    }
}

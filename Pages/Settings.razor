@page "/settings"
@inject IStringLocalizer<Resources.Settings> i18n
@inject IOptions<RequestLocalizationOptions> RequestLocalizationOptions
@inject ILocalizationService LocalizationService
@using System.Globalization;
@using Microsoft.Extensions.Options

<h3 style="font-size:36px">@i18n["title"]</h3>
<br/>
<h4 style="font-size:24px">@i18n["language_header"]</h4>
<p style="font-size:12px">@i18n["language_invite"]</p>
<br/>
<p style="font-size:14px">@i18n["language_intro"]</p>
<Select DataSource="@supportedCultures"
        @bind-Value="@selectedCulture"
        DefaultValue="@CultureInfo.CurrentCulture.Name"
        ValueProperty="c=>c.Name"
        LabelProperty="c=>c.NativeName"
        Style="width:220px">
</Select>

@code {
    List<CultureInfo> supportedCultures = new List<CultureInfo>();
    string selectedCulture{
        get => CultureInfo.CurrentCulture.Name; 
        set
        {
            if (CultureInfo.CurrentCulture.Name != value)
            {
                Trace.WriteLine(value);
                LocalizationService.SetLanguage(new CultureInfo(value));
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        if (RequestLocalizationOptions != null && RequestLocalizationOptions.Value.SupportedCultures != null)
        {
            supportedCultures = RequestLocalizationOptions.Value.SupportedCultures.ToList();
        }
        LocalizationService.LanguageChanged += OnLanguageChanged;
    }

    private void OnLanguageChanged(object sender, CultureInfo e)
    {
        Trace.WriteLine("StateHasChanged");
        // 处理语言更改事件的逻辑
        StateHasChanged(); // 如果需要更新UI，调用StateHasChanged()
    }

    // 记得在组件或页面销毁时取消订阅
    public void Dispose()
    {
        LocalizationService.LanguageChanged -= OnLanguageChanged;
    }
}

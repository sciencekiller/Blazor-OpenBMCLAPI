@page "/settings"
@inject Toolbelt.Blazor.I18nText.I18nText I18nText
@inject IOptions<RequestLocalizationOptions> RequestLocalizationOptions
@inject NavigationManager Nav
@using System.Globalization;
@using Microsoft.Extensions.Options

<h3 style="font-size:36px">@i18n["title"]</h3>
<br/>
<h4 style="font-size:24px">@i18n["language_header"]</h4>
<p style="font-size:12px">@i18n["language_invite"]</p>
<br/>
<p style="font-size:14px">@i18n["language_intro"]</p>
<Select DataSource="@supportedCultures"
        @bind-Value="@selectedCulture"
        DefaultValue="@CultureInfo.CurrentCulture.Name"
        ValueProperty="c=>c.Name"
        LabelProperty="c=>c.NativeName"
        Style="width:220px">
</Select>

@code {
    I18nText.settings i18n = new I18nText.settings();
    List<CultureInfo> supportedCultures = new List<CultureInfo>();
    string selectedCulture{
        get => CultureInfo.CurrentCulture.Name; 
        set
        {
            if (CultureInfo.CurrentCulture.Name != value)
            {
                var uri = new Uri(Nav.Uri)
                    .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
                var cultureEscaped = Uri.EscapeDataString(value);
                var uriEscaped = Uri.EscapeDataString(uri);

                Nav.NavigateTo(
                    $"Culture/Set?culture={cultureEscaped}&redirectUri={uriEscaped}",
                    forceLoad: true);
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        i18n = await I18nText.GetTextTableAsync<I18nText.settings>(this);
        if (RequestLocalizationOptions != null && RequestLocalizationOptions.Value.SupportedCultures != null)
        {
            supportedCultures = RequestLocalizationOptions.Value.SupportedCultures.ToList();
        }
    }
}
